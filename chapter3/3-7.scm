(define (make-account balance password)
        (define (withdraw amount)
                (if (>= balance amount)
                    (begin (set! balance (- balance amount))
                           balance)
                    "Insufficient funds"))
        (define (deposit amount)
                (set! balance (+ balance amount))
                balance)
        (define (validate password password-list)
                (if (null? password-list)
                    #f
                    (or (eq? password (car password-list))
                        (validate password (cdr password-list)))))
        (let ((password-list (cons password ())))
             (lambda (p m)
                     (if (validate p password-list)
                     (cond ((eq? m 'withdraw) withdraw)
                           ((eq? m 'dispoist) dispoist)
                           ((eq? m 'joint) (lambda (x) (set! password-list
                                                             (cons x password-list))))
                           (else (error "Unknown request -- MAKE-ACCOUNT" m)))
                     (error "Incorrect password")))))

(define (make-joint account password new-password)
        ((account password 'joint) new-password)
        account)

(define peter-acc (make-account 100 'peter))
(define paul-acc (make-joint peter-acc 'peter 'paul))

(newline)
(display ((peter-acc 'peter 'withdraw) 40))
(newline)
(display ((paul-acc 'paul 'withdraw) 40))
(newline)
(display ((paul-acc 'peter 'withdraw) 40))
