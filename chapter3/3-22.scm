(define (make-queue)
        (let ((front-ptr ())
              (rear-ptr ()))
             (define (empty-queue?)
                     (null? front-ptr))
             (define (front-queue)
                     (if (empty-queue?)
                         (error "FRONT called with an empty queue" queue))
                         (car front-ptr))
             (define (insert-queue! item)
                     (let ((new-pair (cons item ())))
                          (cond ((empty-queue?)
                                 (set! front-ptr new-pair)
                                 (set! rear-ptr new-pair))
                                (else
                                 (set-cdr! rear-ptr new-pair)
                                 (set! rear-ptr new-pair)))))
             (define (delete-queue!)
                     (if (empty-queue?)
                         (error "DELETE! called with an empty queue"))
                         (set! front-ptr (cdr front-ptr)))
             (define (print-queue)
                     (define (print-queue-iter items)
                             (if (null? (cdr items))
                                 (display (car items))
                                 (begin (display (car items))
                                        (display " ")
                                        (print-queue-iter (cdr items)))))
                     (newline)
                     (display "(")
                     (if (empty-queue?)
                         ()
                         (print-queue-iter front-ptr))
                     (display ")"))
             (define (dispatch m)
                     (cond ((eq? m 'empty-queue?) empty-queue?)
                           ((eq? m 'front-queue) front-queue)
                           ((eq? m 'insert-queue!) insert-queue!)
                           ((eq? m 'delete-queue!) delete-queue!)
                           ((eq? m 'print-queue) print-queue)))
             dispatch))

(define (empty-queue? queue)
        ((queue 'empty-queue?)))

(define (front-queue queue)
        ((queue 'front-queue)))

(define (insert-queue! queue item)
        ((queue 'insert-queue!) item)
        queue)

(define (delete-queue! queue)
        ((queue 'delete-queue!))
        queue)

(define (print-queue queue)
        ((queue 'print-queue)))

(define q1 (make-queue))
(insert-queue! q1 'a)
(print-queue q1)
(insert-queue! q1 'b)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
