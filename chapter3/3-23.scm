(define (make-deque)
        (cons () ()))

(define (empty-deque? deque)
        (null? (car deque)))

(define (front-deque deque)
        (if (empty-deque? deque)
            (error "FRONT called with an empty deque" deque)
            (caar deque)))

(define (rear-deque deque)
        (if (empty-deque? deque)
            (error "REAR called with an empty deque" deque)
            (cadr deque)))

(define (front-insert-deque! deque item)
        (let ((new-pair (cons item (cons () (car deque)))))
             (cond ((empty-deque? deque)
                    (set-car! deque new-pair)
                    (set-cdr! deque new-pair)
                    deque)
                   (else
                    (set-car! (cdar deque) new-pair)
                    (set-car! deque new-pair)
                    deque))))

(define (rear-insert-deque! deque item)
        (let ((new-pair (cons item (cons (cdr deque) ()))))
             (cond ((empty-deque? deque)
                    (set-car! deque new-pair)
                    (set-cdr! deque new-pair)
                    deque)
                   (else
                    (set-cdr! (cddr deque) new-pair)
                    (set-cdr! deque new-pair)
                    deque))))

(define (front-delete-deque! deque)
        (cond ((empty-deque? deque)
               (error "DELETE! called with an empty deque" deque))
              (else
               (set-car! deque (cddar deque))
               (if (null? (car deque))
                   (set-cdr! deque ())
                   (set-car! (cdar deque) ()))
               deque)))

(define (rear-delete-deque! deque)
        (cond ((empty-deque? deque)
               (error "DELETE! called with an empty deque" deque))
              (else
               (set-cdr! deque (caddr deque))
               (if (null? (cdr deque))
                   (set-car! deque ())
                   (set-cdr! (cddr deque) ()))
               deque)))

(define (print-deque deque)
        (define (print-deque-iter items)
                (if (null? (cddr items))
                    (display (car items))
                    (begin (display (car items))
                           (display " ")
                           (print-deque-iter (cddr items)))))
        (newline)
        (display "(")
        (if (empty-deque? deque)
            ()
            (print-deque-iter (car deque)))
        (display ")"))

(define q1 (make-deque))
(front-insert-deque! q1 'b)
(print-deque q1)
(front-insert-deque! q1 'a)
(print-deque q1)
(rear-insert-deque! q1 'c)
(print-deque q1)
(front-delete-deque! q1)
(print-deque q1)
(rear-delete-deque! q1)
(print-deque q1)
(rear-delete-deque! q1)
(print-deque q1)
