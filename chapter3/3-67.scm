(load "3-66a.scm")

(define (pairs s t)
        (cons-stream (list (stream-car s) (stream-car t))
                     (interleave (interleave (stream-map (lambda (x) (list (stream-car s) x))
                                                         (stream-cdr t))
                                             (stream-map (lambda (x) (list x (stream-car t)))
                                                         (stream-cdr s)))
                                 (pairs (stream-cdr s) (stream-cdr t)))))

(define s (pairs integers integers))

(display-line (stream-ref s 0))
(display-line (stream-ref s 1))
(display-line (stream-ref s 2))
(display-line (stream-ref s 3))
(display-line (stream-ref s 4))
(display-line (stream-ref s 5))
(display-line (stream-ref s 6))
(display-line (stream-ref s 7))
(display-line (stream-ref s 8))
(display-line (stream-ref s 9))
