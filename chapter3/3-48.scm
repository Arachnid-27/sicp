(define make-account
        (let ((number-counter 0))
             (lambda (balance)
                     (define (withdraw amount)
                             (if (>= balance amount)
                                 (begin (set! balance (- balance amount))
                                        balance)
                                 "Insufficient funds"))
                     (define (deposit amount)
                             (set! balance (+ balance amount))
                             balance)
                     (let ((balance-serializer (make-serializer))
                           (number (+ number-counter 1)))
                          (set! number-counter number)
                          (define (dispatch m)
                                  (cond ((eq? m 'withdraw) withdraw)
                                        ((eq? m 'deposit) deposit)
                                        ((eq? m 'balance) balance)
                                        ((eq? m 'serializer) balance-serializer)
                                        ((eq? m 'number) number)
                                        (else (error "Unknown request -- MAKE_ACCOUNT" m))))
                          dispatch))))

(define (serialized-exchange account1 account2)
        (define (call-exchange acc1 acc2)
                (let ((serializer1 (acc1 'serializer))
                      (serializer2 (acc2 'serializer)))
                 ((serializer1 (serializer2 exchange)) acc1 acc2)))
        (if (< (account1 'number) (account2 'number))
            (call-exchange account1 account2)
            (call-exchange account2 account1)))
