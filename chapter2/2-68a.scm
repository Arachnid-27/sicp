(load "2-67a.scm")

(define (encode message tree)
        (if (null? message)
            ()
            (append (encode-symbol (car message) tree)
                    (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
        (define (encode-symbol-iter current-branch result)
                (if (leaf? current-branch)
                    (if (equal? (symbol-leaf current-branch) symbol)
                        (reverse result)
                        ())
                    (let ((left-result (encode-symbol-iter (left-branch current-branch)
                                                           (cons 0 result))))
                         (if (null? left-result)
                             (let ((right-result (encode-symbol-iter (right-branch current-branch)
                                                                     (cons 1 result))))
                                  (if (null? right-result)
                                      ()
                                      right-result))
                             left-result))))
        (let ((result (encode-symbol-iter tree ())))
             (if (null? result)
                (error "bad symbol -- ENCODE-SYMBOL" symbol)
                result)))
