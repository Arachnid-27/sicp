(load "2-68a.scm")

(define (adjoin-set x set)
        (cond ((null? set) (list x))
              ((< (weight x) (weight (car set))) (cons x set))
              (else (cons (car set)
                          (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
        (if (null? pairs)
            ()
            (let ((pair (car pairs)))
                 (adjoin-set (make-leaf (car pair)
                                        (cadr pair))
                             (make-leaf-set (cdr pairs))))))

(define (generate-huffman-tree pairs)
        (successive-merge (make-leaf-set pairs)))

(define (successive-merge leaf-set)
    (if (null? (cdr leaf-set))
        (car leaf-set)
        (successive-merge (adjoin-set (make-code-tree (car leaf-set)
                                                      (cadr leaf-set))
                                      (cddr leaf-set)))))
